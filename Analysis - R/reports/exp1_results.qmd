---
title: "exp1_results"
format: docx
lang: en-GB
editor: 
  markdown:
      wrap: 62
---

```{r libraries }
library(tidyverse)
library(ggpp)
library(gt)
```

```{r load data}
# list.files("../data/raw/experiment1", pattern = "*.csv", full.names = T) -> fnames
  # exp 1 
list.files("../data/raw/pilot", pattern = "*.csv", full.names = T) -> fnames
  
fnames2 <- fnames[4:7]
map_df(fnames2, \(x){
  read_csv(x)
}) -> data
```


```{r transformation}
# Pre-transformation
data |>
  mutate(rt = as.integer(ifelse( rt == "null", NA, rt ))) -> data

# Select the relevant columns & rows
data |>
  select(id, trial_info, inducer_run, correct_response, rt, congruent) |>
  filter(trial_info == "Diagnostic trial" | trial_info == "Inducer trial") -> d

# d |> filter(!inducer_run=="practice" ) -> d
  # pilot removing
```


##   Exclusion       =====
```{r due to accuracy}
loss <- list()
loss$data_trials <- nrow(d)

# d |> filter(inducer_run > 0) -> d
  # Pilot removing

### Overall accuracy      ====
d |>
  filter( trial_info == "Diagnostic trial" | trial_info == "Inducer trial" ) |>
  group_by( id ) |>
  summarize( acc = sum(correct_response, na.rm = TRUE) / length( !is.na(correct_response) ) ) |>
  filter( acc < .7 ) |>
  pull( id ) -> loss$exclude_par

loss[["exclude_par_trials"]] <- length( d$rt[d$id == loss$exclude_par] )
loss[["exclude_par_pct"]] <- length( d$rt[d$id == loss$exclude_par] ) / length(d$rt) * 100

d |> filter( !(id %in% loss$exclude_par) ) -> d
``` 

In total, `r length(loss[["exclude_par"]])` `r if(length(loss[["data_trials"]])>1, "participants", "participant"` where excluded due to low accuracy (> 70%). Resulting in a loss of `r loss[["exclude_par_pct"]]` percent of the data.

```{r due to high SD & NA responses include=FALSE}
# Removing trials more than 2.5 SD (from individual mean) & NA RT 
d |>
  group_by(id) |>
  mutate(rt_crit = ifelse( trial_info == "Diagnostic trial",
                           mean( rt, na.rm = TRUE ) + sd( rt, na.rm = TRUE ) * 2.5,
                           NA ),
         retain_trials = ifelse(
           # Remove deviations more than 2.5 SD
           rt >= rt_crit & trial_info == "Diagnostic trial" |
             # AND remove slow responses
             is.na(rt) & trial_info == "Diagnostic trial",
                             0, 1 ) ) -> d

sum(d$rt_retain == 0) / nrow(d) -> loss[["rt_sd_trials"]]
sum(d$rt_retain == 0) / nrow(d) * 100 -> loss[["rt_sd_pct"]]

d |> 
  filter( retain_trials == 1 ) -> d
```

Furthermore, `r loss[["rt_sd_trials"]]` trials were lost due to deviating (2.5 SD) response times and none response(s). Representing a loss of `r loss[["rt_sd_pct"]]` percent of the data. 

```{r only correct inducers}
d |>
  mutate( valid_trials = case_when( trial_info=="Inducer trial" & correct_response==1 ~ 1,
                                    trial_info=="Inducer trial" & correct_response==0 ~ 0,
                                    T ~ NA ) ) |>
  fill(valid_trials, .direction = "up") -> d

sum(d$valid_trials==0) -> loss[["inducer_fail_trials"]]
sum(d$valid_trials==0) / length(d$valid_trials) * 100 -> loss[["inducer_fail_pct"]]

d |> filter( valid_trials == 1 ) -> d
```

Lastly, `r loss[["inducer_fail_trials"]]` trials were removed due to a wrong response on the inducer trial. Representing a loss of `r loss[["inducer_fail_pct"]]` percent of the data. 

A total of `r loss$exclude_par_trials + loss$rt_sd_trials + inducer_fail_trials` trials were lost. Representing a loss of `r loss$exclude_par_trials + loss$rt_sd_trials + inducer_fail_trials / loss$data_trials * 100` percent of the data. 


```{r}
# data summary
d |>
  filter(trial_info=="Diagnostic trial") |>
  group_by(id, congruent) |>
  summarize(rt = mean(rt, na.rm = TRUE),
            pct = sum(correct_response==1) / length(correct_response)) -> d2
```

```{r RT }
d2 |>
  pivot_wider( names_from = congruent, values_from = c(rt, pct) ) |>
  ungroup() |>
  summarise(
    name = "RT",
    m_incongruent = mean(rt_FALSE),
    sd_incongruent = sd(rt_FALSE),
    m_congruent = mean(rt_TRUE),
    sd_congruent = sd(rt_TRUE),
    diff = mean(rt_FALSE - rt_TRUE),
    t = t.test( rt_FALSE, rt_TRUE, paired = TRUE, alternative = "greater" )[["statistic"]],
    df = t.test( rt_FALSE, rt_TRUE, paired = TRUE, alternative = "greater"  )[["parameter"]],
    p = t.test( rt_FALSE, rt_TRUE, paired = TRUE, alternative = "greater"  )[["p.value"]],
    )# -> d_rt

d2 |>
  pivot_wider( names_from = congruent, values_from = c( rt, pct ) ) |>
  ungroup() |>
  summarise(
    name = "PCT",
    m_incongruent = mean( pct_FALSE ),
    sd_incongruent = sd( pct_FALSE ),
    m_congruent = mean( pct_TRUE ),
    sd_congruent = mean( pct_TRUE ),
    diff = mean( pct_FALSE - pct_TRUE ),
    t = t.test( pct_FALSE, pct_TRUE, paired = TRUE )[["statistic"]],
    df = t.test( pct_FALSE, pct_TRUE, paired = TRUE )[["parameter"]],
    p = t.test( pct_FALSE, pct_TRUE, paired = TRUE )[["p.value"]],
  ) -> d_pct

rbind(d_rt, d_pct) |>
  mutate(p.val.cor = p.adjust(p, "bonferroni"),
         ps = case_when(p < .05 ~ "*", p < 0.01 ~ "**", p < 0.001 ~ "***", T ~ "")) |>
  gt() |> 
  fmt_number() |>
 # cols_label(name = "") |>
  tab_spanner(
    "Incongruent",
    c(m_incongruent, sd_incongruent) ) |>
  cols_label(m_incongruent = "M",
             sd_incongruent = "SD") |>
  tab_spanner(
    "Congruent",
    c(m_congruent, sd_congruent) ) |> 
  cols_label(
    m_congruent = "M",
    sd_congruent = "SD" ) |>
  tab_footnote("*p < 0.05, **p < 0.01, ***p < 0.001") |>
  tab_footnote("P's are Bonferroni corrected for 2 tests") 
  

```


###   Plots          =====
```{r}
#| fig-dpi: 300
d2 |>
  mutate(congruent = ifelse(str_detect(congruent, "TRUE"), "Congruent", "Incongruent")) |>
  ggplot(aes(x = congruent, y = rt))+
  geom_point(position = position_dodgenudge(.05, x = .05), alpha = .35)+
  geom_line(aes(group = id), position = position_dodgenudge(.05, x=.05), alpha = .4)+
  stat_summary(fun.data = mean_se, col = "red")+
  labs(x = "", y = "Response time") -> p1

d2 |>
  mutate(congruent = ifelse(str_detect(congruent, "TRUE"), "Congruent", "Incongruent")) |>
  ggplot(aes(x = congruent, y = pct))+
  geom_point(position = position_dodgenudge(.05, x = .05), alpha = .35)+
  geom_line(aes(group = id), position = position_dodgenudge(.05, x=.05), alpha = .4)+
  stat_summary(fun.data = mean_se, col = "red")+
  labs(x = "", y = "Response time") -> p2

p1+p2
```




